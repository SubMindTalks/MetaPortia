=== Sample 0 from hardbyte/pylox ===
classscann(object):def__init__(self,source):self.source=sourceself.start=self.current=self.line=defscan_token(self):self._skip_whitespace()self.start=self.currentifself._is_at_end():returnself._make_token(tokentypes.eof)char=self.advance()ifchar.isalpha():returnself._make_identifi()ifchar.isdigit():returnself._numb()ifchar=='(':returnself._make_token(tokentypes.left_paren)ifchar==')':returnself._make_token(tokentypes.right_paren)ifchar=='{':returnself._make_token(tokentypes.left_brace)ifchar=='}':returnself._make_token(tokentypes.right_brace)ifchar==';':returnself._make_token(tokentypes.semicolon)ifchar==',':returnself._make_token(tokentypes.comma)ifchar=='.':returnself._make_token(tokentypes.dot)ifchar=='-':returnself._make_token(tokentypes.minus)ifchar=='+':returnself._make_token(tokentypes.plus)ifchar=='/':returnself._make_token(tokentypes.slash)ifchar=='*':returnself._make_token(tokentypes.star)ifchar=='!':returnself._make_token(tokentypes.bang_equalifself._match('=')elsetokentypes.bang)ifchar=='=':returnself._make_token(tokentypes.equal_equalifself._match('=')elsetokentypes.equal)ifchar=='<':returnself._make_token(tokentypes.less_equalifself._match('=')elsetokentypes.less)ifchar=='>':returnself._make_token(tokentypes.greater_equalifself._match('=')elsetokentypes.great)ifchar=='"':returnself._make_str()returnself._error_token('unexpectcharact')def_is_at_end(self):returnlen(self.source)==self.currentdef_make_token(self,token_type):returntoken(start=self.start,length=self.current-self.start,line=self.line,type=token_type)def_error_token(self,message):returnerrortoken(message,self.line)defget_token_str(self,token):ifisinstance(token,errortoken):returntoken.messageelse:end_loc=token.start+token.lengthassertend_loc<len(self.source)assertend_loc>returnself.source[token.start:end_loc]defadvance(self):self.current+=returnself.source[self.current-]def_match(self,expect):ifself._is_at_end():returnfalseifself.source[self.current]!=expect:returnfalseself.current+=returntruedef_skip_whitespace(self):whiletrue:char=self._peek()ifcharin'\r\t':self.advance()elifchar=='\n':self.line+=self.advance()elifchar=='/':ifself._peek_next()=='/':whileself._peek()!='\n'and(notself._is_at_end()):self.advance()else:breakelse:returndef_peek(self):ifself.current==len(self.source):return'\x00'returnself.source[self.current]def_peek_next(self):ifself._is_at_end():return'\x00'returnself.source[self.current+]def_make_str(self):whileself._peek()!='"'and(notself._is_at_end()):ifself._peek()=='\n':self.line+=self.advance()ifself._is_at_end():returnself._error_token('unterminatstr.')self.advance()returnself._make_token(tokentypes.str)def_numb(self):whileself._peek().isdigit():self.advance()ifself._peek()=='.'andself._peek_next().isdigit():self.advance()whileself._peek().isdigit():self.advance()returnself._make_token(tokentypes.numb)def_make_identifi(self):whileself._peek().isalpha()orself._peek().isdigit():self.advance()returnself._make_token(self._identifi())def_identifi(self):char=self.source[self.start]ifchar=='a':returnself._check_keyword(,,'nd',tokentypes.and)ifchar=='c':returnself._check_keyword(,,'lass',tokentypes.class)ifchar=='e':returnself._check_keyword(,,'lse',tokentypes.else)ifchar=='f':ifself.current-self.start>:char2=self.source[self.start+]ifchar2=='a':returnself._check_keyword(,,'lse',tokentypes.false)elifchar2=='o':returnself._check_keyword(,,'r',tokentypes.for)elifchar2=='u':returnself._check_keyword(,,'n',tokentypes.fun)ifchar=='i':returnself._check_keyword(,,'f',tokentypes.if)ifchar=='n':returnself._check_keyword(,,'il',tokentypes.nil)ifchar=='o':returnself._check_keyword(,,'r',tokentypes.or)ifchar=='p':returnself._check_keyword(,,'rint',tokentypes.print)ifchar=='r':returnself._check_keyword(,,'eturn',tokentypes.return)ifchar=='s':returnself._check_keyword(,,'uper',tokentypes.sup)ifchar=='t':ifself.current-self.start>:char2=self.source[self.start+]ifchar2=='h':returnself._check_keyword(,,'is',tokentypes.this)elifchar2=='r':returnself._check_keyword(,,'ue',tokentypes.true)ifchar=='v':returnself._check_keyword(,,'ar',tokentypes.var)ifchar=='w':returnself._check_keyword(,,'hile',tokentypes.while)returntokentypes.identifidef_check_keyword(self,start,length,rest,type):ifself.source[self.start+start:self.start+start+length]==rest:returntypeelse:returntokentypes.identifi

=== Sample 1 from Esamanoaz/plox ===
classscann:def__init__(self,source,interpret):self.source=sourceself.interpret=interpretself.tokens=[]self.start=self.current=self.line=self.alpha=[#lowercase,uppercase,andunderscore'a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z','a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z','_']self.digits=['','','','','','','','','','']#.isdigit()couldworkbutitchecksmorethanwewantorneedself.token_strings={'(':lambdac:tokentype.left_paren,')':lambdac:tokentype.right_paren,'{':lambdac:tokentype.left_brace,'}':lambdac:tokentype.right_brace,',':lambdac:tokentype.comma,'.':lambdac:tokentype.dot,'-':lambdac:tokentype.minus,'+':lambdac:tokentype.plus,';':lambdac:tokentype.semicolon,'*':lambdac:tokentype.star,'!':lambdac:tokentype.bang_equalifself._match('=')elsetokentype.bang,'=':lambdac:tokentype.equal_equalifself._match('=')elsetokentype.equal,'<':lambdac:tokentype.less_equalifself._match('=')elsetokentype.less,'>':lambdac:tokentype.greater_equalifself._match('=')elsetokentype.great,'/':lambdac:self._slash_logic(),#ignorewhitespace'':lambdac:none,'\r':lambdac:none,'\t':lambdac:none,'\n':lambdac:self._advance_line(),'"':lambdac:self._string_logic(),}self.keywords={'and':tokentype.and,'

=== Sample 2 from mmclar/pylox ===
classscann:def__init__(self,source):self.tokens=[]self.start=self.current=self.line=self.source=sourcedefisatend(self):returnself.current>=len(self.source)defscantokens(self):whilenotself.isatend():self.start=self.currentself.scantoken()self.tokens.append(token(tokentype.eof,"",none,self.line))returnself.tokensdefscantoken(self):c=self.advance()def_handleslash(slf):ifslf.match('/'):whileslf.peek()!='\n'andnotself.isatend():self.advance()returnnoneelse:returntokentype.slashdef_handlenewline(slf):slf.line+=returnnonedef_handlestr(slf):whileslf.peek()!='"'andnotslf.isatend():ifslf.peek()=='\n':slf.line+=slf.advance()ifslf.isatend():errors.error(slf.line,'unterminatstr.')returnnone#handleclos'"'slf.advance()#trimthesurroundquotesvalue=slf.source[slf.start+:slf.current-]returntokentype.str,valuedef_handlenumb(slf):whileisdigit(slf.peek()):slf.advance()ifslf.peek()=='.'andisdigit(slf.peeknext()):slf.advance()whileisdigit(slf.peek()):slf.advance()text=slf.source[slf.start:slf.current]returntokentype.numb,float(text)def_handleidentifi(slf):whileisalphanumeric(slf.peek()):slf.advance()text=slf.source[slf.start:slf.current]tokentype={'and':tokentype.and,'

=== Sample 3 from simoc/lox2 ===
classscann:definitscann(self,source):self.start=sourceself.currentindex=self.startindex=self.line=defisatend(self):flag=self.currentindex>=len(self.start)returnflagdefmaketoken(self,type):token=token()token.type=typetoken.start=self.start[self.startindex:self.currentindex]token.line=self.linereturntokendeferrortoken(self,message):token=token()token.type=tokentype.token_errortoken.start=messagetoken.line=self.linereturntokendefstr(self):whileself.peek()!='"'and(notself.isatend()):ifself.peek()=='\n':self.line+=self.advance()ifself.isatend():returnerrortoken('unterminatstr.')self.advance()returnself.maketoken(tokentype.token_str)defadvance(self):c=self.start[self.currentindex]self.currentindex+=returncdefmatch(self,expect):ifself.isatend():returnfalseifself.start[self.currentindex]!=expect:returnfalseself.currentindex+=returntruedefpeek(self):ifself.isatend():return'\x00'returnself.start[self.currentindex]defpeeknext(self):ifself.isatend():return'\x00'returnself.start[self.currentindex+]defskipwhitespace(self):ifself.isatend():returnwhiletrue:c=self.peek()ifc==''orc=='\r'orc=='\t':self.advance()elifc=='\n':self.line+=self.advance()elifc=='/':ifself.peeknext()=='/':whileself.peek()!='\n'and(notself.isatend()):self.advance()else:returnelse:returndefisalpha(self,c):ifc>='a'andc<='z':returntrueifc>='a'andc<='z':returntrueifc=='_':returntruereturnfalsedefcheckkeyword(self,start,length,rest,type):s=self.start[self.startindex+start:self.currentindex]ifs==rest:returntypereturntokentype.token_identifidefidentifiertype(self):c=self.start[self.startindex]ifc=='a':returnself.checkkeyword(,,'nd',tokentype.token_and)ifc=='c':returnself.checkkeyword(,,'lass',tokentype.token_class)ifc=='e':returnself.checkkeyword(,,'lse',tokentype.token_else)ifc=='f':c2=self.start[self.startindex+]ifc2=='a':returnself.checkkeyword(,,'lse',tokentype.token_false)ifc2=='o':returnself.checkkeyword(,,'r',tokentype.token_for)ifc2=='u':returnself.checkkeyword(,,'n',tokentype.token_fun)ifc=='i':returnself.checkkeyword(,,'f',tokentype.token_if)ifc=='n':returnself.checkkeyword(,,'il',tokentype.token_nil)ifc=='o':returnself.checkkeyword(,,'r',tokentype.token_or)ifc=='p':returnself.checkkeyword(,,'rint',tokentype.token_print)ifc=='r':returnself.checkkeyword(,,'eturn',tokentype.token_return)ifc=='s':returnself.checkkeyword(,,'uper',tokentype.token_sup)ifc=='t':c2=self.start[self.startindex+]ifc2=='h':returnself.checkkeyword(,,'is',tokentype.token_this)ifc2=='r':returnself.checkkeyword(,,'ue',tokentype.token_true)ifc=='v':returnself.checkkeyword(,,'ar',tokentype.token_var)ifc=='w':returnself.checkkeyword(,,'hile',tokentype.token_while)returntokentype.token_identifidefidentifi(self):whileself.isalpha(self.peek())orself.isdigit(self.peek()):self.advance()returnself.maketoken(self.identifiertype())defisdigit(self,c):returnc>=''andc<=''defnumb(self):whileself.isdigit(self.peek()):self.advance()ifself.peek()=='.'andself.isdigit(self.peeknext()):self.advance()whileself.isdigit(self.peek()):self.advance()returnself.maketoken(tokentype.token_numb)defscantoken(self):self.skipwhitespace()self.startindex=self.currentindexifself.isatend():returnself.maketoken(tokentype.token_eof)c=self.advance()ifself.isalpha(c):returnself.identifi()ifself.isdigit(c):returnself.numb()ifc=='(':returnself.maketoken(tokentype.token_left_paren)ifc==')':returnself.maketoken(tokentype.token_right_paren)ifc=='{':returnself.maketoken(tokentype.token_left_brace)ifc=='}':returnself.maketoken(tokentype.token_right_brace)ifc==';':returnself.maketoken(tokentype.token_semicolon)ifc==',':returnself.maketoken(tokentype.token_comma)ifc=='.':returnself.maketoken(tokentype.token_dot)ifc=='-':returnself.maketoken(tokentype.token_minus)ifc=='+':returnself.maketoken(tokentype.token_plus)ifc=='/':returnself.maketoken(tokentype.token_slash)ifc=='*':returnself.maketoken(tokentype.token_star)ifc=='!':ifself.match('='):returnself.maketoken(tokentype.token_bang_equal)else:returnself.maketoken(tokentype.token_bang)ifc=='=':ifself.match('='):returnself.maketoken(tokentype.token_equal_equal)else:returnself.maketoken(tokentype.token_equal)ifc=='<':ifself.match('='):returnself.maketoken(tokentype.token_less_equal)else:returnself.maketoken(tokentype.token_less)ifc=='>':ifself.match('='):returnself.maketoken(tokentype.token_greater_equal)else:returnself.maketoken(tokentype.token_great)ifc=='"':returnself.str()returnself.errortoken("unexpectcharact'{}'.".format(c))

=== Sample 4 from adelavegaf/loxpy ===
classscann:def__init__(self,source:str)->none:self.source:str=sourceself.tokens:list[token]=[]self.start:int=self.current:int=self.line:int=defscan_tokens(self)->list[token]:whilenotself.is_at_end():self.start=self.currentself.scan_token()self.tokens.append(token(tokentype.eof,'',none,self.line))returnself.tokensdefscan_token(self):c=self.advance()matchc:case'(':self.add_token(tokentype.left_paren)case')':self.add_token(tokentype.right_paren)case'{':self.add_token(tokentype.left_brace)case'}':self.add_token(tokentype.right_brace)case',':self.add_token(tokentype.comma)case'.':self.add_token(tokentype.dot)case'-':self.add_token(tokentype.minus)case'+':self.add_token(tokentype.plus)case';':self.add_token(tokentype.semicolon)case'*':self.add_token(tokentype.star)case'?':self.add_token(tokentype.question_mark)case':':self.add_token(tokentype.colon)case'!':ifself.match('='):self.add_token(tokentype.bang_equal)else:self.add_token(tokentype.bang)case'=':ifself.match('='):self.add_token(tokentype.equal_equal)else:self.add_token(tokentype.equal)case'<':ifself.match('='):self.add_token(tokentype.less_equal)else:self.add_token(tokentype.less)case'>':ifself.match('='):self.add_token(tokentype.greater_equal)else:self.add_token(tokentype.great)case'/':ifself.match('/'):whilenotself.is_at_end()andself.peek()!='\n':self.advance()else:self.add_token(tokentype.slash)case'/':self.add_token(tokentype.slash)case'"':self.str()casedifis_digit(d):self.numb()caseaifis_alpha(a):self.identifi()case'\n':self.line+=case''|'\r'|'\t':passcase_:error.error(self.line,'unexpectcharact')defadd_token(self,token_type:tokentype,literal:loxtype=none)->none:token=token(token_type,self.source[self.start:self.current],literal,self.line)self.tokens.append(token)defstr(self)->none:whilenotself.is_at_end()andself.peek()!='"':c=self.advance()ifc=='\n':self.line+=ifself.is_at_end():error.error(self.line,'unterminatstr')returnself.advance()literal=self.source[self.start+:self.current-]self.add_token(tokentype.str,str(literal))defnumb(self)->none:whileis_digit(self.peek()):self.advance()ifself.peek()=='.'andis_digit(self.peek_next()):self.advance()whileis_digit(self.peek()):self.advance()literal=float(self.source[self.start:self.current])self.add_token(tokentype.numb,numb(literal))defidentifi(self)->none:whileis_alphanumeric(self.peek()):self.advance()value=self.source[self.start:self.current]token_type=keywords.get(value)ortokentype.identifiself.add_token(token_type)defadvance(self)->str:c=self.source[self.current]self.current+=returncdefmatch(self,expect:str)->bool:ifself.is_at_end():returnfalseifself.source[self.current]!=expect:returnfalseself.current+=returntruedefpeek(self)->str:ifself.is_at_end():return'\x00'else:returnself.source[self.current]defpeek_next(self)->str:ifself.current+>=len(self.source):return'\x00'else:returnself.source[self.current+]defis_at_end(self)->bool:returnself.current>=len(self.source)defis_digit(d:str)->bool:matchd:case''|''|''|''|''|''|''|''|''|'':returntruecase_:returnfalsedefis_alpha(a:str)->bool:matcha:case'_'|'a'|'b'|'c'|'d'|'e'|'f'|'g'|'h'|'i'|'j'|'k'|'l'|'m'|'n'|'o'|'p'|'q'|'r'|'s'|'t'|'u'|'v'|'w'|'x'|'y'|'z'|'a'|'b'|'c'|'d'|'e'|'f'|'g'|'h'|'i'|'j'|'k'|'l'|'m'|'n'|'o'|'p'|'q'|'r'|'s'|'t'|'u'|'v'|'w'|'x'|'y'|'z':returntruecase_:returnfalsedefis_alphanumeric(a:str)->bool:returnis_digit(a)oris_alpha(a)

=== Sample 5 from FlorianPommerening/lox ===
classscann:def__init__(self,source):self._source=sourceself._tokens=[]self._start=self._current=self._line=defscan_tokens(self):whilenotself._is_at_end():self._start=self._currentself._scan_token()self._tokens.append(token(tokentype.eof,'',none,self._line))returnself._tokensdef_scan_token(self):match(c:=self._advance()):case'(':self._add_token(tokentype.left_paren)case'(':self._add_token(tokentype.left_paren)case')':self._add_token(tokentype.right_paren)case'{':self._add_token(tokentype.left_brace)case'}':self._add_token(tokentype.right_brace)case',':self._add_token(tokentype.comma)case'.':self._add_token(tokentype.dot)case'-':self._add_token(tokentype.minus)case'+':self._add_token(tokentype.plus)case';':self._add_token(tokentype.semicolon)case'*':self._add_token(tokentype.star)case'!':ifself._match('='):self._add_token(tokentype.bang_equal)else:self._add_token(tokentype.bang)case'=':ifself._match('='):self._add_token(tokentype.equal_equal)else:self._add_token(tokentype.equal)case'<':ifself._match('='):self._add_token(tokentype.less_equal)else:self._add_token(tokentype.less)case'>':ifself._match('='):self._add_token(tokentype.greater_equal)else:self._add_token(tokentype.great)case'/':ifself._match('/'):whileself._peek()!='\n'and(notself._is_at_end()):self._advance()else:self._add_token(tokentype.slash)case''|'\r'|'\t':passcase'\n':self._line+=case'"':self._str()case_:ifis_digit(c):self._numb()elifis_alpha(c):self._identifi()else:error(self._line,f"unexpectcharact'{c}'.")def_advance(self):c=self._source[self._current]self._current+=returncdef_match(self,expect):ifself._is_at_end():returnfalseifself._source[self._current]!=expect:returnfalseself._current+=returntruedef_peek(self):ifself._is_at_end():return'\x00'returnself._source[self._current]def_peek_next(self):ifself._current+>=len(self._source):return'\x00'returnself._source[self._current+]def_add_token(self,token_type,literal=none):text=self._source[self._start:self._current]self._tokens.append(token(token_type,text,literal,self._line))def_is_at_end(self):returnself._current>=len(self._source)def_str(self):whileself._peek()!='"'and(notself._is_at_end()):ifself._peek()=='\n':self._line+=self._advance()ifself._is_at_end():error(self._line,'unterminatstr.')returnself._advance()value=self._source[self._start+:self._current-]self._add_token(tokentype.str,value)def_numb(self):whileis_digit(self._peek()):self._advance()ifself._peek()=='.'andis_digit(self._peek_next()):self._advance()whileis_digit(self._peek()):self._advance()value=float(self._source[self._start:self._current])self._add_token(tokentype.numb,value)def_identifi(self):whileis_alpha_numeric(self._peek()):self._advance()text=self._source[self._start:self._current]token_type=keywords.get(text,tokentype.identifi)self._add_token(token_type)defis_digit(c):return''<=c<=''defis_alpha(c):return'a'<=c<='z'or'a'<=c<='z'orc=='_'defis_alpha_numeric(c):returnis_alpha(c)oris_digit(c)

=== Sample 6 from yashvesikar/pylox ===
classscann:def__init__(self,source:str)->none:self.source=sourceself.tokens=[]#keeptrackofwhereinthesourcecodethescannisself.start=self.current=self.line=self.token_map={r'(':tk.left_paren,r')':tk.right_paren,r'{':tk.left_brace,r'}':tk.right_brace,r',':tk.comma,r'.':tk.dot,r'-':tk.minus,r'+':tk.plus,r';':tk.semicolon,r'*':tk.star,r'':none,'\r':none,'\t':none,'and':tk.and,'

