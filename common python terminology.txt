# Common Python Programming Terminology Synonyms

## Lexical Analysis / Parsing
| Concept | Common Terms | Description |
|---------|--------------|-------------|
| Lexer | - Scanner<br>- Tokenizer<br>- Lexical Analyzer | Component that breaks input text into tokens |
| Token | - Lexeme<br>- Symbol<br>- Terminal | Individual unit of source code identified by the lexer |
| Parser | - Syntax Analyzer<br>- Grammar Parser<br>- Recursive Descent Parser | Component that creates syntax tree from tokens |
| AST | - Parse Tree<br>- Syntax Tree<br>- Abstract Tree | Tree representation of code structure |

## Data Structures
| Concept | Common Terms | Description |
|---------|--------------|-------------|
| List | - Array<br>- Sequence<br>- Vector | Ordered collection of items |
| Dictionary | - Hash<br>- Map<br>- Hashmap<br>- Associative Array | Key-value pair collection |
| Set | - HashSet<br>- Collection<br>- Unique List | Unordered collection of unique items |
| Queue | - FIFO<br>- Buffer<br>- Line | First-in-first-out data structure |
| Stack | - LIFO<br>- Call Stack<br>- Push-down Stack | Last-in-first-out data structure |

## Functions and Methods
| Concept | Common Terms | Description |
|---------|--------------|-------------|
| Function | - Method<br>- Procedure<br>- Routine<br>- Callable | Block of reusable code |
| Parameter | - Argument<br>- Input<br>- Arg | Value passed to a function |
| Return Value | - Output<br>- Result<br>- Response | Value returned by a function |
| Lambda | - Anonymous Function<br>- Closure<br>- Arrow Function | Single-expression function |
| Callback | - Handler<br>- Event Handler<br>- Listener | Function passed as argument |

## Object-Oriented Programming
| Concept | Common Terms | Description |
|---------|--------------|-------------|
| Class | - Type<br>- Blueprint<br>- Template | Definition of an object |
| Instance | - Object<br>- Instance Object<br>- Class Instance | Concrete object of a class |
| Method | - Member Function<br>- Instance Method<br>- Object Function | Function belonging to a class |
| Property | - Attribute<br>- Field<br>- Member Variable | Variable belonging to a class |
| Constructor | - Initializer<br>- __init__<br>- Setup | Method to create new instances |

## Error Handling
| Concept | Common Terms | Description |
|---------|--------------|-------------|
| Exception | - Error<br>- Error Condition<br>- Fault | Runtime error or unusual condition |
| Raise | - Throw<br>- Signal<br>- Fire | Generate an exception |
| Try/Except | - Try/Catch<br>- Error Handling<br>- Exception Handler | Handle potential errors |

## Iteration
| Concept | Common Terms | Description |
|---------|--------------|-------------|
| Iterator | - Generator<br>- Sequence<br>- Stream | Object that yields values |
| Yield | - Generate<br>- Produce<br>- Return Next | Return value from iterator |
| Loop | - Iteration<br>- Cycle<br>- Repeat | Repeat code execution |

## Variables and Memory
| Concept | Common Terms | Description |
|---------|--------------|-------------|
| Variable | - Name<br>- Identifier<br>- Reference | Named storage location |
| Global | - Module-level<br>- Top-level<br>- File-scope | Variable accessible everywhere |
| Local | - Function-scope<br>- Block-scope<br>- Inner | Variable with limited scope |
| Reference | - Pointer<br>- Handle<br>- Name | Way to access an object |

## Modules and Imports
| Concept | Common Terms | Description |
|---------|--------------|-------------|
| Module | - Library<br>- Package<br>- Extension | Python file or collection |
| Import | - Include<br>- Require<br>- Use | Load external code |
| Package | - Library<br>- Distribution<br>- Project | Collection of modules |

## String Processing
| Concept | Common Terms | Description |
|---------|--------------|-------------|
| String | - Text<br>- Str<br>- Character Array | Sequence of characters |
| Regex | - Pattern<br>- Regular Expression<br>- RE | Pattern matching syntax |
| Format | - Interpolate<br>- Template<br>- Substitute | Insert values into string |

## Asynchronous Programming
| Concept | Common Terms | Description |
|---------|--------------|-------------|
| Async | - Asynchronous<br>- Non-blocking<br>- Concurrent | Code that can run independently |
| Await | - Wait For<br>- Yield From<br>- Block Until | Wait for async result |
| Coroutine | - Async Function<br>- Task<br>- Future | Async code unit |
| Event Loop | - Runner<br>- Scheduler<br>- Reactor | Async execution manager |